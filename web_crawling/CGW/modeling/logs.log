2023-05-24 13:17:43,538:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-24 13:17:43,538:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-24 13:17:43,538:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-24 13:17:43,538:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-24 13:17:55,671:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:55,761:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:55,780:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:55,780:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:55,802:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:55,803:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:55,825:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:55,825:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:55,849:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:55,850:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:55,871:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:55,872:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:55,896:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:55,896:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:55,923:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:55,924:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:55,951:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:55,952:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:55,983:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:55,984:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:56,267:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:56,268:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:56,291:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:56,292:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:56,322:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:56,323:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:56,345:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:56,346:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:56,371:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:56,372:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:56,398:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:56,398:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:56,427:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:56,427:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:56,458:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:56,459:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:56,492:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:56,493:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:17:56,847:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:17:56,848:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:06,651:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:06,652:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:06,671:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:06,714:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:06,739:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:06,739:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:06,768:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:06,768:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:06,788:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:06,788:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:06,808:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:06,809:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:06,833:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:06,833:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:06,857:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:06,858:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:06,885:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:06,886:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:06,916:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:06,917:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:07,115:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:07,115:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:07,137:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:07,138:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:07,162:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:07,163:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:07,183:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:07,183:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:07,208:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:07,208:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:07,238:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:07,239:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:07,266:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:07,267:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:07,297:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:07,298:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:07,331:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:07,332:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:30:07,631:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning
  warnings.warn(

2023-05-24 13:30:07,632:WARNING:c:\Users\NT550-052\anaconda3\envs\mlp\lib\site-packages\sklearn\cluster\_kmeans.py:1382: UserWarning: KMeans is known to have a memory leak on Windows with MKL, when there are less chunks than available threads. You can avoid it by setting the environment variable OMP_NUM_THREADS=1.
  warnings.warn(

2023-05-24 13:32:48,188:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-24 13:32:48,189:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-24 13:32:48,189:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-24 13:32:48,189:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-24 14:39:11,187:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-24 14:39:11,187:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-24 14:39:11,187:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-24 14:39:11,187:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-05-24 14:39:11,836:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-05-24 14:39:26,384:INFO:PyCaret ClassificationExperiment
2023-05-24 14:39:26,389:INFO:Logging name: clf-default-name
2023-05-24 14:39:26,394:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-24 14:39:26,394:INFO:version 3.0.2
2023-05-24 14:39:26,395:INFO:Initializing setup()
2023-05-24 14:39:26,395:INFO:self.USI: ad3c
2023-05-24 14:39:26,396:INFO:self._variable_keys: {'is_multiclass', 'html_param', 'X', 'idx', 'exp_name_log', 'target_param', 'fold_shuffle_param', 'gpu_n_jobs_param', 'fix_imbalance', 'exp_id', 'data', 'logging_param', 'pipeline', 'X_test', 'X_train', 'fold_groups_param', 'gpu_param', 'y_train', 'log_plots_param', 'memory', 'y', '_available_plots', 'y_test', 'fold_generator', 'USI', 'n_jobs_param', '_ml_usecase', 'seed'}
2023-05-24 14:39:26,396:INFO:Checking environment
2023-05-24 14:39:26,396:INFO:python_version: 3.10.11
2023-05-24 14:39:26,396:INFO:python_build: ('main', 'Apr 20 2023 18:56:50')
2023-05-24 14:39:26,397:INFO:machine: AMD64
2023-05-24 14:39:26,397:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-24 14:39:26,401:INFO:Memory: svmem(total=16889774080, available=8752570368, percent=48.2, used=8137203712, free=8752570368)
2023-05-24 14:39:26,401:INFO:Physical Core: 4
2023-05-24 14:39:26,402:INFO:Logical Core: 8
2023-05-24 14:39:26,402:INFO:Checking libraries
2023-05-24 14:39:26,402:INFO:System:
2023-05-24 14:39:26,402:INFO:    python: 3.10.11 | packaged by Anaconda, Inc. | (main, Apr 20 2023, 18:56:50) [MSC v.1916 64 bit (AMD64)]
2023-05-24 14:39:26,402:INFO:executable: c:\Users\NT550-052\anaconda3\envs\tmp\python.exe
2023-05-24 14:39:26,402:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-24 14:39:26,403:INFO:PyCaret required dependencies:
2023-05-24 14:39:26,403:INFO:                 pip: 23.0.1
2023-05-24 14:39:26,403:INFO:          setuptools: 66.0.0
2023-05-24 14:39:26,403:INFO:             pycaret: 3.0.2
2023-05-24 14:39:26,403:INFO:             IPython: 8.13.2
2023-05-24 14:39:26,403:INFO:          ipywidgets: 8.0.6
2023-05-24 14:39:26,403:INFO:                tqdm: 4.65.0
2023-05-24 14:39:26,403:INFO:               numpy: 1.23.5
2023-05-24 14:39:26,404:INFO:              pandas: 1.5.3
2023-05-24 14:39:26,404:INFO:              jinja2: 3.1.2
2023-05-24 14:39:26,404:INFO:               scipy: 1.10.1
2023-05-24 14:39:26,404:INFO:              joblib: 1.2.0
2023-05-24 14:39:26,404:INFO:             sklearn: 1.2.2
2023-05-24 14:39:26,404:INFO:                pyod: 1.0.9
2023-05-24 14:39:26,404:INFO:            imblearn: 0.10.1
2023-05-24 14:39:26,404:INFO:   category_encoders: 2.6.1
2023-05-24 14:39:26,404:INFO:            lightgbm: 3.3.5
2023-05-24 14:39:26,404:INFO:               numba: 0.57.0
2023-05-24 14:39:26,404:INFO:            requests: 2.31.0
2023-05-24 14:39:26,404:INFO:          matplotlib: 3.7.1
2023-05-24 14:39:26,404:INFO:          scikitplot: 0.3.7
2023-05-24 14:39:26,404:INFO:         yellowbrick: 1.5
2023-05-24 14:39:26,404:INFO:              plotly: 5.14.1
2023-05-24 14:39:26,404:INFO:             kaleido: 0.2.1
2023-05-24 14:39:26,404:INFO:         statsmodels: 0.14.0
2023-05-24 14:39:26,404:INFO:              sktime: 0.17.0
2023-05-24 14:39:26,404:INFO:               tbats: 1.1.3
2023-05-24 14:39:26,404:INFO:            pmdarima: 2.0.3
2023-05-24 14:39:26,404:INFO:              psutil: 5.9.5
2023-05-24 14:39:26,404:INFO:PyCaret optional dependencies:
2023-05-24 14:39:26,417:INFO:                shap: Not installed
2023-05-24 14:39:26,417:INFO:           interpret: Not installed
2023-05-24 14:39:26,417:INFO:                umap: Not installed
2023-05-24 14:39:26,418:INFO:    pandas_profiling: Not installed
2023-05-24 14:39:26,418:INFO:  explainerdashboard: Not installed
2023-05-24 14:39:26,418:INFO:             autoviz: Not installed
2023-05-24 14:39:26,418:INFO:           fairlearn: Not installed
2023-05-24 14:39:26,418:INFO:             xgboost: Not installed
2023-05-24 14:39:26,418:INFO:            catboost: Not installed
2023-05-24 14:39:26,418:INFO:              kmodes: Not installed
2023-05-24 14:39:26,418:INFO:             mlxtend: Not installed
2023-05-24 14:39:26,418:INFO:       statsforecast: Not installed
2023-05-24 14:39:26,418:INFO:        tune_sklearn: Not installed
2023-05-24 14:39:26,418:INFO:                 ray: Not installed
2023-05-24 14:39:26,418:INFO:            hyperopt: Not installed
2023-05-24 14:39:26,419:INFO:              optuna: Not installed
2023-05-24 14:39:26,419:INFO:               skopt: Not installed
2023-05-24 14:39:26,419:INFO:              mlflow: Not installed
2023-05-24 14:39:26,419:INFO:              gradio: Not installed
2023-05-24 14:39:26,419:INFO:             fastapi: Not installed
2023-05-24 14:39:26,419:INFO:             uvicorn: Not installed
2023-05-24 14:39:26,419:INFO:              m2cgen: Not installed
2023-05-24 14:39:26,419:INFO:           evidently: Not installed
2023-05-24 14:39:26,419:INFO:               fugue: Not installed
2023-05-24 14:39:26,419:INFO:           streamlit: Not installed
2023-05-24 14:39:26,419:INFO:             prophet: Not installed
2023-05-24 14:39:26,419:INFO:None
2023-05-24 14:39:26,419:INFO:Set up data.
2023-05-24 14:39:26,834:INFO:Set up train/test split.
2023-05-24 14:39:27,084:INFO:Set up index.
2023-05-24 14:39:27,094:INFO:Set up folding strategy.
2023-05-24 14:39:27,094:INFO:Assigning column types.
2023-05-24 14:39:27,289:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-05-24 14:39:27,328:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-24 14:39:27,330:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-24 14:39:27,360:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:39:27,381:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:39:27,419:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-24 14:39:27,420:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-24 14:39:27,444:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:39:27,444:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:39:27,445:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-05-24 14:39:27,485:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-24 14:39:27,510:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:39:27,510:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:39:27,552:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-24 14:39:27,579:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:39:27,579:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:39:27,579:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-05-24 14:39:27,642:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:39:27,643:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:39:27,707:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:39:27,707:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:39:27,711:INFO:Preparing preprocessing pipeline...
2023-05-24 14:39:27,733:INFO:Set up label encoding.
2023-05-24 14:39:27,733:INFO:Set up simple imputation.
2023-05-24 14:39:27,756:INFO:Set up column name cleaning.
2023-05-24 14:39:28,545:INFO:Finished creating preprocessing pipeline.
2023-05-24 14:39:28,553:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\NT550-~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', '24_Hour_Peak',
                                             'All_time_peak', 'average_forever',
                                             'average_2weeks', 'median_forever',
                                             'm...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2023-05-24 14:39:28,553:INFO:Creating final display dataframe.
2023-05-24 14:39:30,200:INFO:Setup _display_container:                     Description  \
0                    Session id   
1                        Target   
2                   Target type   
3                Target mapping   
4           Original data shape   
5        Transformed data shape   
6   Transformed train set shape   
7    Transformed test set shape   
8              Numeric features   
9                    Preprocess   
10              Imputation type   
11           Numeric imputation   
12       Categorical imputation   
13               Fold Generator   
14                  Fold Number   
15                     CPU Jobs   
16                      Use GPU   
17               Log Experiment   
18              Experiment Name   
19                          USI   

                                                Value  
0                                                 123  
1                                              Review  
2                                          Multiclass  
3   Indifference: 0, Mixed: 1, Negative: 2, Positi...  
4                                        (46252, 508)  
5                                        (46252, 508)  
6                                        (32376, 508)  
7                                        (13876, 508)  
8                                                 507  
9                                                True  
10                                             simple  
11                                               mean  
12                                               mode  
13                                    StratifiedKFold  
14                                                 10  
15                                                 -1  
16                                              False  
17                                              False  
18                                   clf-default-name  
19                                               ad3c  
2023-05-24 14:39:30,281:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:39:30,282:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:39:30,358:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:39:30,358:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:39:30,359:INFO:setup() successfully completed in 3.98s...............
2023-05-24 14:50:53,330:INFO:gpu_param set to False
2023-05-24 14:50:53,455:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:50:53,456:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:50:53,559:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:50:53,560:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:39,537:INFO:PyCaret ClassificationExperiment
2023-05-24 14:53:39,537:INFO:Logging name: clf-default-name
2023-05-24 14:53:39,537:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-24 14:53:39,538:INFO:version 3.0.2
2023-05-24 14:53:39,538:INFO:Initializing setup()
2023-05-24 14:53:39,538:INFO:self.USI: 3814
2023-05-24 14:53:39,538:INFO:self._variable_keys: {'is_multiclass', 'html_param', 'X', 'idx', 'exp_name_log', 'target_param', 'fold_shuffle_param', 'gpu_n_jobs_param', 'fix_imbalance', 'exp_id', 'data', 'logging_param', 'pipeline', 'X_test', 'X_train', 'fold_groups_param', 'gpu_param', 'y_train', 'log_plots_param', 'memory', 'y', '_available_plots', 'y_test', 'fold_generator', 'USI', 'n_jobs_param', '_ml_usecase', 'seed'}
2023-05-24 14:53:39,539:INFO:Checking environment
2023-05-24 14:53:39,539:INFO:python_version: 3.10.11
2023-05-24 14:53:39,539:INFO:python_build: ('main', 'Apr 20 2023 18:56:50')
2023-05-24 14:53:39,539:INFO:machine: AMD64
2023-05-24 14:53:39,539:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-24 14:53:39,545:INFO:Memory: svmem(total=16889774080, available=7670091776, percent=54.6, used=9219682304, free=7670091776)
2023-05-24 14:53:39,546:INFO:Physical Core: 4
2023-05-24 14:53:39,546:INFO:Logical Core: 8
2023-05-24 14:53:39,546:INFO:Checking libraries
2023-05-24 14:53:39,546:INFO:System:
2023-05-24 14:53:39,547:INFO:    python: 3.10.11 | packaged by Anaconda, Inc. | (main, Apr 20 2023, 18:56:50) [MSC v.1916 64 bit (AMD64)]
2023-05-24 14:53:39,548:INFO:executable: c:\Users\NT550-052\anaconda3\envs\tmp\python.exe
2023-05-24 14:53:39,549:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-24 14:53:39,549:INFO:PyCaret required dependencies:
2023-05-24 14:53:39,549:INFO:                 pip: 23.0.1
2023-05-24 14:53:39,549:INFO:          setuptools: 66.0.0
2023-05-24 14:53:39,549:INFO:             pycaret: 3.0.2
2023-05-24 14:53:39,549:INFO:             IPython: 8.13.2
2023-05-24 14:53:39,549:INFO:          ipywidgets: 8.0.6
2023-05-24 14:53:39,550:INFO:                tqdm: 4.65.0
2023-05-24 14:53:39,550:INFO:               numpy: 1.23.5
2023-05-24 14:53:39,550:INFO:              pandas: 1.5.3
2023-05-24 14:53:39,550:INFO:              jinja2: 3.1.2
2023-05-24 14:53:39,550:INFO:               scipy: 1.10.1
2023-05-24 14:53:39,551:INFO:              joblib: 1.2.0
2023-05-24 14:53:39,551:INFO:             sklearn: 1.2.2
2023-05-24 14:53:39,551:INFO:                pyod: 1.0.9
2023-05-24 14:53:39,551:INFO:            imblearn: 0.10.1
2023-05-24 14:53:39,551:INFO:   category_encoders: 2.6.1
2023-05-24 14:53:39,551:INFO:            lightgbm: 3.3.5
2023-05-24 14:53:39,551:INFO:               numba: 0.57.0
2023-05-24 14:53:39,552:INFO:            requests: 2.31.0
2023-05-24 14:53:39,552:INFO:          matplotlib: 3.7.1
2023-05-24 14:53:39,552:INFO:          scikitplot: 0.3.7
2023-05-24 14:53:39,552:INFO:         yellowbrick: 1.5
2023-05-24 14:53:39,553:INFO:              plotly: 5.14.1
2023-05-24 14:53:39,553:INFO:             kaleido: 0.2.1
2023-05-24 14:53:39,553:INFO:         statsmodels: 0.14.0
2023-05-24 14:53:39,554:INFO:              sktime: 0.17.0
2023-05-24 14:53:39,554:INFO:               tbats: 1.1.3
2023-05-24 14:53:39,554:INFO:            pmdarima: 2.0.3
2023-05-24 14:53:39,554:INFO:              psutil: 5.9.5
2023-05-24 14:53:39,554:INFO:PyCaret optional dependencies:
2023-05-24 14:53:39,554:INFO:                shap: Not installed
2023-05-24 14:53:39,554:INFO:           interpret: Not installed
2023-05-24 14:53:39,554:INFO:                umap: Not installed
2023-05-24 14:53:39,554:INFO:    pandas_profiling: Not installed
2023-05-24 14:53:39,554:INFO:  explainerdashboard: Not installed
2023-05-24 14:53:39,554:INFO:             autoviz: Not installed
2023-05-24 14:53:39,555:INFO:           fairlearn: Not installed
2023-05-24 14:53:39,555:INFO:             xgboost: Not installed
2023-05-24 14:53:39,555:INFO:            catboost: Not installed
2023-05-24 14:53:39,555:INFO:              kmodes: Not installed
2023-05-24 14:53:39,555:INFO:             mlxtend: Not installed
2023-05-24 14:53:39,555:INFO:       statsforecast: Not installed
2023-05-24 14:53:39,555:INFO:        tune_sklearn: Not installed
2023-05-24 14:53:39,555:INFO:                 ray: Not installed
2023-05-24 14:53:39,555:INFO:            hyperopt: Not installed
2023-05-24 14:53:39,555:INFO:              optuna: Not installed
2023-05-24 14:53:39,555:INFO:               skopt: Not installed
2023-05-24 14:53:39,555:INFO:              mlflow: Not installed
2023-05-24 14:53:39,555:INFO:              gradio: Not installed
2023-05-24 14:53:39,555:INFO:             fastapi: Not installed
2023-05-24 14:53:39,555:INFO:             uvicorn: Not installed
2023-05-24 14:53:39,557:INFO:              m2cgen: Not installed
2023-05-24 14:53:39,557:INFO:           evidently: Not installed
2023-05-24 14:53:39,557:INFO:               fugue: Not installed
2023-05-24 14:53:39,557:INFO:           streamlit: Not installed
2023-05-24 14:53:39,557:INFO:             prophet: Not installed
2023-05-24 14:53:39,557:INFO:None
2023-05-24 14:53:39,557:INFO:Set up data.
2023-05-24 14:53:39,981:INFO:Set up train/test split.
2023-05-24 14:53:40,241:INFO:Set up index.
2023-05-24 14:53:40,256:INFO:Set up folding strategy.
2023-05-24 14:53:40,256:INFO:Assigning column types.
2023-05-24 14:53:40,495:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-05-24 14:53:40,549:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-24 14:53:40,551:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-24 14:53:40,584:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:40,584:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:40,634:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-24 14:53:40,634:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-24 14:53:40,663:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:40,663:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:40,663:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-05-24 14:53:40,711:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-24 14:53:40,739:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:40,739:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:40,788:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-24 14:53:40,813:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:40,814:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:40,814:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-05-24 14:53:40,883:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:40,883:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:40,949:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:40,949:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:40,950:INFO:Preparing preprocessing pipeline...
2023-05-24 14:53:40,973:INFO:Set up label encoding.
2023-05-24 14:53:40,973:INFO:Set up simple imputation.
2023-05-24 14:53:40,998:INFO:Set up column name cleaning.
2023-05-24 14:53:41,403:INFO:Finished creating preprocessing pipeline.
2023-05-24 14:53:41,413:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\NT550-~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', '24_Hour_Peak',
                                             'All_time_peak', 'average_forever',
                                             'average_2weeks', 'median_forever',
                                             'm...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2023-05-24 14:53:41,413:INFO:Creating final display dataframe.
2023-05-24 14:53:42,372:INFO:Setup _display_container:                     Description  \
0                    Session id   
1                        Target   
2                   Target type   
3                Target mapping   
4           Original data shape   
5        Transformed data shape   
6   Transformed train set shape   
7    Transformed test set shape   
8              Numeric features   
9                    Preprocess   
10              Imputation type   
11           Numeric imputation   
12       Categorical imputation   
13               Fold Generator   
14                  Fold Number   
15                     CPU Jobs   
16                      Use GPU   
17               Log Experiment   
18              Experiment Name   
19                          USI   

                                                Value  
0                                                 123  
1                                              Review  
2                                          Multiclass  
3   Indifference: 0, Mixed: 1, Negative: 2, Positi...  
4                                        (46252, 508)  
5                                        (46252, 508)  
6                                        (32376, 508)  
7                                        (13876, 508)  
8                                                 507  
9                                                True  
10                                             simple  
11                                               mean  
12                                               mode  
13                                    StratifiedKFold  
14                                                 10  
15                                                 -1  
16                                              False  
17                                              False  
18                                   clf-default-name  
19                                               3814  
2023-05-24 14:53:42,467:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:42,468:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:42,540:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:42,540:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:42,540:INFO:setup() successfully completed in 3.01s...............
2023-05-24 14:53:42,657:INFO:PyCaret ClassificationExperiment
2023-05-24 14:53:42,657:INFO:Logging name: clf-default-name
2023-05-24 14:53:42,657:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-05-24 14:53:42,657:INFO:version 3.0.2
2023-05-24 14:53:42,657:INFO:Initializing setup()
2023-05-24 14:53:42,657:INFO:self.USI: 4057
2023-05-24 14:53:42,657:INFO:self._variable_keys: {'is_multiclass', 'html_param', 'X', 'idx', 'exp_name_log', 'target_param', 'fold_shuffle_param', 'gpu_n_jobs_param', 'fix_imbalance', 'exp_id', 'data', 'logging_param', 'pipeline', 'X_test', 'X_train', 'fold_groups_param', 'gpu_param', 'y_train', 'log_plots_param', 'memory', 'y', '_available_plots', 'y_test', 'fold_generator', 'USI', 'n_jobs_param', '_ml_usecase', 'seed'}
2023-05-24 14:53:42,657:INFO:Checking environment
2023-05-24 14:53:42,657:INFO:python_version: 3.10.11
2023-05-24 14:53:42,657:INFO:python_build: ('main', 'Apr 20 2023 18:56:50')
2023-05-24 14:53:42,657:INFO:machine: AMD64
2023-05-24 14:53:42,657:INFO:platform: Windows-10-10.0.22621-SP0
2023-05-24 14:53:42,657:INFO:Memory: svmem(total=16889774080, available=7891922944, percent=53.3, used=8997851136, free=7891922944)
2023-05-24 14:53:42,657:INFO:Physical Core: 4
2023-05-24 14:53:42,657:INFO:Logical Core: 8
2023-05-24 14:53:42,657:INFO:Checking libraries
2023-05-24 14:53:42,657:INFO:System:
2023-05-24 14:53:42,657:INFO:    python: 3.10.11 | packaged by Anaconda, Inc. | (main, Apr 20 2023, 18:56:50) [MSC v.1916 64 bit (AMD64)]
2023-05-24 14:53:42,657:INFO:executable: c:\Users\NT550-052\anaconda3\envs\tmp\python.exe
2023-05-24 14:53:42,657:INFO:   machine: Windows-10-10.0.22621-SP0
2023-05-24 14:53:42,657:INFO:PyCaret required dependencies:
2023-05-24 14:53:42,657:INFO:                 pip: 23.0.1
2023-05-24 14:53:42,657:INFO:          setuptools: 66.0.0
2023-05-24 14:53:42,666:INFO:             pycaret: 3.0.2
2023-05-24 14:53:42,666:INFO:             IPython: 8.13.2
2023-05-24 14:53:42,666:INFO:          ipywidgets: 8.0.6
2023-05-24 14:53:42,666:INFO:                tqdm: 4.65.0
2023-05-24 14:53:42,666:INFO:               numpy: 1.23.5
2023-05-24 14:53:42,666:INFO:              pandas: 1.5.3
2023-05-24 14:53:42,666:INFO:              jinja2: 3.1.2
2023-05-24 14:53:42,666:INFO:               scipy: 1.10.1
2023-05-24 14:53:42,666:INFO:              joblib: 1.2.0
2023-05-24 14:53:42,666:INFO:             sklearn: 1.2.2
2023-05-24 14:53:42,666:INFO:                pyod: 1.0.9
2023-05-24 14:53:42,666:INFO:            imblearn: 0.10.1
2023-05-24 14:53:42,666:INFO:   category_encoders: 2.6.1
2023-05-24 14:53:42,667:INFO:            lightgbm: 3.3.5
2023-05-24 14:53:42,667:INFO:               numba: 0.57.0
2023-05-24 14:53:42,667:INFO:            requests: 2.31.0
2023-05-24 14:53:42,667:INFO:          matplotlib: 3.7.1
2023-05-24 14:53:42,667:INFO:          scikitplot: 0.3.7
2023-05-24 14:53:42,667:INFO:         yellowbrick: 1.5
2023-05-24 14:53:42,667:INFO:              plotly: 5.14.1
2023-05-24 14:53:42,667:INFO:             kaleido: 0.2.1
2023-05-24 14:53:42,667:INFO:         statsmodels: 0.14.0
2023-05-24 14:53:42,667:INFO:              sktime: 0.17.0
2023-05-24 14:53:42,668:INFO:               tbats: 1.1.3
2023-05-24 14:53:42,668:INFO:            pmdarima: 2.0.3
2023-05-24 14:53:42,668:INFO:              psutil: 5.9.5
2023-05-24 14:53:42,668:INFO:PyCaret optional dependencies:
2023-05-24 14:53:42,668:INFO:                shap: Not installed
2023-05-24 14:53:42,668:INFO:           interpret: Not installed
2023-05-24 14:53:42,668:INFO:                umap: Not installed
2023-05-24 14:53:42,668:INFO:    pandas_profiling: Not installed
2023-05-24 14:53:42,668:INFO:  explainerdashboard: Not installed
2023-05-24 14:53:42,668:INFO:             autoviz: Not installed
2023-05-24 14:53:42,668:INFO:           fairlearn: Not installed
2023-05-24 14:53:42,668:INFO:             xgboost: Not installed
2023-05-24 14:53:42,668:INFO:            catboost: Not installed
2023-05-24 14:53:42,668:INFO:              kmodes: Not installed
2023-05-24 14:53:42,668:INFO:             mlxtend: Not installed
2023-05-24 14:53:42,668:INFO:       statsforecast: Not installed
2023-05-24 14:53:42,668:INFO:        tune_sklearn: Not installed
2023-05-24 14:53:42,668:INFO:                 ray: Not installed
2023-05-24 14:53:42,670:INFO:            hyperopt: Not installed
2023-05-24 14:53:42,670:INFO:              optuna: Not installed
2023-05-24 14:53:42,670:INFO:               skopt: Not installed
2023-05-24 14:53:42,670:INFO:              mlflow: Not installed
2023-05-24 14:53:42,670:INFO:              gradio: Not installed
2023-05-24 14:53:42,670:INFO:             fastapi: Not installed
2023-05-24 14:53:42,670:INFO:             uvicorn: Not installed
2023-05-24 14:53:42,670:INFO:              m2cgen: Not installed
2023-05-24 14:53:42,670:INFO:           evidently: Not installed
2023-05-24 14:53:42,670:INFO:               fugue: Not installed
2023-05-24 14:53:42,670:INFO:           streamlit: Not installed
2023-05-24 14:53:42,670:INFO:             prophet: Not installed
2023-05-24 14:53:42,670:INFO:None
2023-05-24 14:53:42,670:INFO:Set up data.
2023-05-24 14:53:43,169:INFO:Set up train/test split.
2023-05-24 14:53:43,448:INFO:Set up index.
2023-05-24 14:53:43,461:INFO:Set up folding strategy.
2023-05-24 14:53:43,461:INFO:Assigning column types.
2023-05-24 14:53:43,701:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-05-24 14:53:43,740:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-24 14:53:43,740:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-24 14:53:43,768:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:43,768:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:43,817:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-05-24 14:53:43,818:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-24 14:53:43,869:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:43,869:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:43,870:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-05-24 14:53:43,962:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-24 14:53:43,996:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:43,997:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:44,047:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-05-24 14:53:44,084:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:44,084:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:44,084:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-05-24 14:53:44,163:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:44,164:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:44,265:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:44,266:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:44,267:INFO:Preparing preprocessing pipeline...
2023-05-24 14:53:44,291:INFO:Set up label encoding.
2023-05-24 14:53:44,292:INFO:Set up simple imputation.
2023-05-24 14:53:44,326:INFO:Set up column name cleaning.
2023-05-24 14:53:44,762:INFO:Finished creating preprocessing pipeline.
2023-05-24 14:53:44,770:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\NT550-~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', '24_Hour_Peak',
                                             'All_time_peak', 'average_forever',
                                             'average_2weeks', 'median_forever',
                                             'm...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2023-05-24 14:53:44,770:INFO:Creating final display dataframe.
2023-05-24 14:53:45,732:INFO:Setup _display_container:                     Description  \
0                    Session id   
1                        Target   
2                   Target type   
3                Target mapping   
4           Original data shape   
5        Transformed data shape   
6   Transformed train set shape   
7    Transformed test set shape   
8              Numeric features   
9                    Preprocess   
10              Imputation type   
11           Numeric imputation   
12       Categorical imputation   
13               Fold Generator   
14                  Fold Number   
15                     CPU Jobs   
16                      Use GPU   
17               Log Experiment   
18              Experiment Name   
19                          USI   

                                                Value  
0                                                 123  
1                                              Review  
2                                          Multiclass  
3   Indifference: 0, Mixed: 1, Negative: 2, Positi...  
4                                        (46252, 508)  
5                                        (46252, 508)  
6                                        (32376, 508)  
7                                        (13876, 508)  
8                                                 507  
9                                                True  
10                                             simple  
11                                               mean  
12                                               mode  
13                                    StratifiedKFold  
14                                                 10  
15                                                 -1  
16                                              False  
17                                              False  
18                                   clf-default-name  
19                                               4057  
2023-05-24 14:53:45,822:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:45,822:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:45,899:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:45,899:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-05-24 14:53:45,899:INFO:setup() successfully completed in 3.24s...............
2023-05-24 14:53:45,948:INFO:Initializing compare_models()
2023-05-24 14:53:45,949:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-05-24 14:53:45,949:INFO:Checking exceptions
2023-05-24 14:53:46,081:INFO:Preparing display monitor
2023-05-24 14:53:46,115:INFO:Initializing Logistic Regression
2023-05-24 14:53:46,115:INFO:Total runtime is 0.0 minutes
2023-05-24 14:53:46,120:INFO:SubProcess create_model() called ==================================
2023-05-24 14:53:46,121:INFO:Initializing create_model()
2023-05-24 14:53:46,121:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000225F6D05090>, model_only=True, return_train_score=False, kwargs={})
2023-05-24 14:53:46,121:INFO:Checking exceptions
2023-05-24 14:53:46,121:INFO:Importing libraries
2023-05-24 14:53:46,121:INFO:Copying training dataset
2023-05-24 14:53:46,390:INFO:Defining folds
2023-05-24 14:53:46,390:INFO:Declaring metric variables
2023-05-24 14:53:46,397:INFO:Importing untrained model
2023-05-24 14:53:46,402:INFO:Logistic Regression Imported successfully
2023-05-24 14:53:46,411:INFO:Starting cross validation
2023-05-24 14:53:46,414:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-24 14:53:57,133:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:238: UserWarning: Persisting input arguments took 0.53s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, y = self._memory_transform(

2023-05-24 14:53:57,876:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:238: UserWarning: Persisting input arguments took 0.72s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, y = self._memory_transform(

2023-05-24 14:56:16,145:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-24 14:56:16,746:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.58s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 14:56:17,030:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-24 14:56:17,965:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:17,998:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:18,051:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:18,281:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-24 14:56:19,032:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:19,080:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:19,100:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:56:19,116:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:20,303:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.66s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 14:56:20,569:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-24 14:56:20,712:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:20,800:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:20,826:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:56:20,855:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:21,286:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.69s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 14:56:21,669:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-24 14:56:23,021:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:23,083:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:23,104:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:56:23,119:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:23,518:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-24 14:56:23,714:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:23,769:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:23,801:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:24,664:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-24 14:56:25,002:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:25,039:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:25,087:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:25,889:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:25,932:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:25,951:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:56:25,964:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:26,769:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-24 14:56:27,535:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:27,555:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:56:27,565:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:56:27,572:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:11,954:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-24 14:57:12,438:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-05-24 14:57:12,506:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:12,520:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:12,527:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:57:12,535:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:12,825:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:12,837:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:12,850:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:13,098:INFO:Calculating mean and std
2023-05-24 14:57:13,100:INFO:Creating metrics dataframe
2023-05-24 14:57:13,123:INFO:Uploading results into container
2023-05-24 14:57:13,124:INFO:Uploading model into container now
2023-05-24 14:57:13,125:INFO:_master_model_container: 1
2023-05-24 14:57:13,125:INFO:_display_container: 2
2023-05-24 14:57:13,125:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-05-24 14:57:13,125:INFO:create_model() successfully completed......................................
2023-05-24 14:57:13,208:INFO:SubProcess create_model() end ==================================
2023-05-24 14:57:13,208:INFO:Creating metrics dataframe
2023-05-24 14:57:13,220:INFO:Initializing K Neighbors Classifier
2023-05-24 14:57:13,220:INFO:Total runtime is 3.4517461180686952 minutes
2023-05-24 14:57:13,224:INFO:SubProcess create_model() called ==================================
2023-05-24 14:57:13,224:INFO:Initializing create_model()
2023-05-24 14:57:13,224:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000225F6D05090>, model_only=True, return_train_score=False, kwargs={})
2023-05-24 14:57:13,224:INFO:Checking exceptions
2023-05-24 14:57:13,224:INFO:Importing libraries
2023-05-24 14:57:13,225:INFO:Copying training dataset
2023-05-24 14:57:13,436:INFO:Defining folds
2023-05-24 14:57:13,436:INFO:Declaring metric variables
2023-05-24 14:57:13,440:INFO:Importing untrained model
2023-05-24 14:57:13,444:INFO:K Neighbors Classifier Imported successfully
2023-05-24 14:57:13,455:INFO:Starting cross validation
2023-05-24 14:57:13,459:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-24 14:57:16,153:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.51s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 14:57:30,831:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:30,871:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:30,905:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:30,956:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:30,989:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:31,026:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:31,073:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:31,144:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:31,187:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:31,641:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:31,701:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:31,736:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:31,740:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:31,772:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:31,808:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:32,247:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:32,277:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:32,304:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:32,442:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:32,466:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:32,475:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:32,489:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:32,499:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:32,524:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:38,884:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:38,895:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:38,909:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:38,937:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:38,957:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:38,973:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:39,334:INFO:Calculating mean and std
2023-05-24 14:57:39,336:INFO:Creating metrics dataframe
2023-05-24 14:57:39,374:INFO:Uploading results into container
2023-05-24 14:57:39,375:INFO:Uploading model into container now
2023-05-24 14:57:39,375:INFO:_master_model_container: 2
2023-05-24 14:57:39,375:INFO:_display_container: 2
2023-05-24 14:57:39,375:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-05-24 14:57:39,375:INFO:create_model() successfully completed......................................
2023-05-24 14:57:39,458:INFO:SubProcess create_model() end ==================================
2023-05-24 14:57:39,458:INFO:Creating metrics dataframe
2023-05-24 14:57:39,472:INFO:Initializing Naive Bayes
2023-05-24 14:57:39,472:INFO:Total runtime is 3.8892802874247234 minutes
2023-05-24 14:57:39,475:INFO:SubProcess create_model() called ==================================
2023-05-24 14:57:39,475:INFO:Initializing create_model()
2023-05-24 14:57:39,476:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000225F6D05090>, model_only=True, return_train_score=False, kwargs={})
2023-05-24 14:57:39,476:INFO:Checking exceptions
2023-05-24 14:57:39,476:INFO:Importing libraries
2023-05-24 14:57:39,476:INFO:Copying training dataset
2023-05-24 14:57:39,683:INFO:Defining folds
2023-05-24 14:57:39,684:INFO:Declaring metric variables
2023-05-24 14:57:39,688:INFO:Importing untrained model
2023-05-24 14:57:39,691:INFO:Naive Bayes Imported successfully
2023-05-24 14:57:39,701:INFO:Starting cross validation
2023-05-24 14:57:39,704:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-24 14:57:43,111:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,136:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,174:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,182:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,216:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,219:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,234:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,267:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,274:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,302:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,324:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,352:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,388:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,409:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,442:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,448:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,486:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,495:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,522:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,532:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,571:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,611:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,644:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:43,675:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:45,044:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:45,061:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:45,064:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:45,077:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:45,080:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:45,092:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:45,248:INFO:Calculating mean and std
2023-05-24 14:57:45,252:INFO:Creating metrics dataframe
2023-05-24 14:57:45,322:INFO:Uploading results into container
2023-05-24 14:57:45,322:INFO:Uploading model into container now
2023-05-24 14:57:45,323:INFO:_master_model_container: 3
2023-05-24 14:57:45,323:INFO:_display_container: 2
2023-05-24 14:57:45,323:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-05-24 14:57:45,323:INFO:create_model() successfully completed......................................
2023-05-24 14:57:45,408:INFO:SubProcess create_model() end ==================================
2023-05-24 14:57:45,409:INFO:Creating metrics dataframe
2023-05-24 14:57:45,419:INFO:Initializing Decision Tree Classifier
2023-05-24 14:57:45,419:INFO:Total runtime is 3.988397272427877 minutes
2023-05-24 14:57:45,422:INFO:SubProcess create_model() called ==================================
2023-05-24 14:57:45,422:INFO:Initializing create_model()
2023-05-24 14:57:45,423:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000225F6D05090>, model_only=True, return_train_score=False, kwargs={})
2023-05-24 14:57:45,423:INFO:Checking exceptions
2023-05-24 14:57:45,423:INFO:Importing libraries
2023-05-24 14:57:45,423:INFO:Copying training dataset
2023-05-24 14:57:45,619:INFO:Defining folds
2023-05-24 14:57:45,620:INFO:Declaring metric variables
2023-05-24 14:57:45,623:INFO:Importing untrained model
2023-05-24 14:57:45,627:INFO:Decision Tree Classifier Imported successfully
2023-05-24 14:57:45,637:INFO:Starting cross validation
2023-05-24 14:57:45,640:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-24 14:57:53,623:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:53,656:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:53,687:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:53,706:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:53,717:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:53,736:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:53,760:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:53,786:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:53,795:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:53,913:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:53,949:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:53,999:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:54,341:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:54,373:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:54,415:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:54,643:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:54,666:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:54,671:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:54,688:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:54,696:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:54,714:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:54,764:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:54,791:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:54,821:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:58,233:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:58,237:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:58,247:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:58,253:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:58,261:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:58,267:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:57:58,470:INFO:Calculating mean and std
2023-05-24 14:57:58,473:INFO:Creating metrics dataframe
2023-05-24 14:57:58,518:INFO:Uploading results into container
2023-05-24 14:57:58,519:INFO:Uploading model into container now
2023-05-24 14:57:58,520:INFO:_master_model_container: 4
2023-05-24 14:57:58,520:INFO:_display_container: 2
2023-05-24 14:57:58,520:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=123, splitter='best')
2023-05-24 14:57:58,520:INFO:create_model() successfully completed......................................
2023-05-24 14:57:58,602:INFO:SubProcess create_model() end ==================================
2023-05-24 14:57:58,602:INFO:Creating metrics dataframe
2023-05-24 14:57:58,612:INFO:Initializing SVM - Linear Kernel
2023-05-24 14:57:58,612:INFO:Total runtime is 4.208267911275228 minutes
2023-05-24 14:57:58,616:INFO:SubProcess create_model() called ==================================
2023-05-24 14:57:58,617:INFO:Initializing create_model()
2023-05-24 14:57:58,617:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000225F6D05090>, model_only=True, return_train_score=False, kwargs={})
2023-05-24 14:57:58,617:INFO:Checking exceptions
2023-05-24 14:57:58,618:INFO:Importing libraries
2023-05-24 14:57:58,618:INFO:Copying training dataset
2023-05-24 14:57:58,806:INFO:Defining folds
2023-05-24 14:57:58,806:INFO:Declaring metric variables
2023-05-24 14:57:58,809:INFO:Importing untrained model
2023-05-24 14:57:58,814:INFO:SVM - Linear Kernel Imported successfully
2023-05-24 14:57:58,824:INFO:Starting cross validation
2023-05-24 14:57:58,828:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-24 14:58:26,968:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-24 14:58:26,979:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:27,010:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:27,029:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:58:27,046:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:27,624:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-24 14:58:27,650:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:27,680:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:27,705:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:58:27,721:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:28,455:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-24 14:58:28,470:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:28,505:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:28,541:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:30,732:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.57s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 14:58:31,087:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-24 14:58:31,100:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:31,192:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:31,262:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:31,837:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.64s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 14:58:31,870:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-24 14:58:31,934:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:31,983:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:31,999:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:58:32,056:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:32,960:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-24 14:58:32,977:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:33,018:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:33,089:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:34,690:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-24 14:58:34,707:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:34,736:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:34,772:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:36,623:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-24 14:58:36,633:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:36,658:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:36,679:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:39,577:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-24 14:58:39,586:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:39,604:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:39,625:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:42,445:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-05-24 14:58:42,453:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:42,468:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:42,479:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:42,724:INFO:Calculating mean and std
2023-05-24 14:58:42,725:INFO:Creating metrics dataframe
2023-05-24 14:58:42,769:INFO:Uploading results into container
2023-05-24 14:58:42,770:INFO:Uploading model into container now
2023-05-24 14:58:42,771:INFO:_master_model_container: 5
2023-05-24 14:58:42,771:INFO:_display_container: 2
2023-05-24 14:58:42,772:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-05-24 14:58:42,772:INFO:create_model() successfully completed......................................
2023-05-24 14:58:42,857:INFO:SubProcess create_model() end ==================================
2023-05-24 14:58:42,857:INFO:Creating metrics dataframe
2023-05-24 14:58:42,868:INFO:Initializing Ridge Classifier
2023-05-24 14:58:42,869:INFO:Total runtime is 4.94588539203008 minutes
2023-05-24 14:58:42,872:INFO:SubProcess create_model() called ==================================
2023-05-24 14:58:42,872:INFO:Initializing create_model()
2023-05-24 14:58:42,872:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000225F6D05090>, model_only=True, return_train_score=False, kwargs={})
2023-05-24 14:58:42,872:INFO:Checking exceptions
2023-05-24 14:58:42,872:INFO:Importing libraries
2023-05-24 14:58:42,872:INFO:Copying training dataset
2023-05-24 14:58:43,057:INFO:Defining folds
2023-05-24 14:58:43,057:INFO:Declaring metric variables
2023-05-24 14:58:43,061:INFO:Importing untrained model
2023-05-24 14:58:43,067:INFO:Ridge Classifier Imported successfully
2023-05-24 14:58:43,075:INFO:Starting cross validation
2023-05-24 14:58:43,078:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-24 14:58:46,184:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-24 14:58:46,197:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,212:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-24 14:58:46,227:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,238:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,257:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,273:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:58:46,275:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:58:46,290:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,293:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,307:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-24 14:58:46,320:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,352:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,382:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,449:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-24 14:58:46,462:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,476:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-24 14:58:46,492:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,493:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-24 14:58:46,509:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,512:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,528:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,545:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:58:46,549:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-24 14:58:46,553:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,561:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,562:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,567:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,580:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:58:46,607:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,611:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,623:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-24 14:58:46,624:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:58:46,637:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,640:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,685:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:46,713:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:58:46,729:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:48,429:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-24 14:58:48,438:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:48,453:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:48,460:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:58:48,468:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:48,569:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-05-24 14:58:48,575:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:48,589:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:48,596:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 14:58:48,604:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:58:48,841:INFO:Calculating mean and std
2023-05-24 14:58:48,842:INFO:Creating metrics dataframe
2023-05-24 14:58:48,892:INFO:Uploading results into container
2023-05-24 14:58:48,893:INFO:Uploading model into container now
2023-05-24 14:58:48,893:INFO:_master_model_container: 6
2023-05-24 14:58:48,893:INFO:_display_container: 2
2023-05-24 14:58:48,893:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2023-05-24 14:58:48,893:INFO:create_model() successfully completed......................................
2023-05-24 14:58:48,976:INFO:SubProcess create_model() end ==================================
2023-05-24 14:58:48,977:INFO:Creating metrics dataframe
2023-05-24 14:58:48,988:INFO:Initializing Random Forest Classifier
2023-05-24 14:58:48,989:INFO:Total runtime is 5.047889661788941 minutes
2023-05-24 14:58:48,992:INFO:SubProcess create_model() called ==================================
2023-05-24 14:58:48,992:INFO:Initializing create_model()
2023-05-24 14:58:48,992:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000225F6D05090>, model_only=True, return_train_score=False, kwargs={})
2023-05-24 14:58:48,992:INFO:Checking exceptions
2023-05-24 14:58:48,992:INFO:Importing libraries
2023-05-24 14:58:48,992:INFO:Copying training dataset
2023-05-24 14:58:49,179:INFO:Defining folds
2023-05-24 14:58:49,179:INFO:Declaring metric variables
2023-05-24 14:58:49,187:INFO:Importing untrained model
2023-05-24 14:58:49,191:INFO:Random Forest Classifier Imported successfully
2023-05-24 14:58:49,200:INFO:Starting cross validation
2023-05-24 14:58:49,204:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-24 14:59:25,135:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 2.73s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 14:59:25,862:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 2.84s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 14:59:26,865:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.97s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 14:59:27,525:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.63s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 14:59:28,066:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.58s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 14:59:28,068:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.56s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 14:59:28,114:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.54s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 14:59:28,145:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.50s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 14:59:28,191:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.63s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 14:59:28,288:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:28,319:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:28,353:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:28,544:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.55s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 14:59:29,108:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:29,172:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:29,189:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:29,202:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:29,212:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.57s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 14:59:29,217:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.57s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 14:59:29,217:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.61s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 14:59:29,217:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:29,217:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.57s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 14:59:29,296:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:29,426:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.67s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 14:59:29,884:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:29,913:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:29,947:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:29,962:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:29,962:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:29,994:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:29,995:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:30,048:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:30,158:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:30,763:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:30,854:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:30,917:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:30,917:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:30,933:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:30,996:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:38,096:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.52s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 14:59:39,748:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:39,764:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:39,782:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:40,342:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:40,355:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:40,369:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:40,617:INFO:Calculating mean and std
2023-05-24 14:59:40,619:INFO:Creating metrics dataframe
2023-05-24 14:59:40,671:INFO:Uploading results into container
2023-05-24 14:59:40,672:INFO:Uploading model into container now
2023-05-24 14:59:40,672:INFO:_master_model_container: 7
2023-05-24 14:59:40,672:INFO:_display_container: 2
2023-05-24 14:59:40,673:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2023-05-24 14:59:40,673:INFO:create_model() successfully completed......................................
2023-05-24 14:59:40,749:INFO:SubProcess create_model() end ==================================
2023-05-24 14:59:40,750:INFO:Creating metrics dataframe
2023-05-24 14:59:40,760:INFO:Initializing Quadratic Discriminant Analysis
2023-05-24 14:59:40,760:INFO:Total runtime is 5.910742135842641 minutes
2023-05-24 14:59:40,763:INFO:SubProcess create_model() called ==================================
2023-05-24 14:59:40,763:INFO:Initializing create_model()
2023-05-24 14:59:40,763:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000225F6D05090>, model_only=True, return_train_score=False, kwargs={})
2023-05-24 14:59:40,763:INFO:Checking exceptions
2023-05-24 14:59:40,763:INFO:Importing libraries
2023-05-24 14:59:40,763:INFO:Copying training dataset
2023-05-24 14:59:40,955:INFO:Defining folds
2023-05-24 14:59:40,956:INFO:Declaring metric variables
2023-05-24 14:59:40,959:INFO:Importing untrained model
2023-05-24 14:59:40,964:INFO:Quadratic Discriminant Analysis Imported successfully
2023-05-24 14:59:40,975:INFO:Starting cross validation
2023-05-24 14:59:40,977:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-24 14:59:45,412:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-24 14:59:45,621:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-24 14:59:45,702:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-24 14:59:45,854:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-24 14:59:46,164:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-24 14:59:46,173:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-24 14:59:46,241:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-24 14:59:46,412:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-24 14:59:52,412:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:52,448:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:52,492:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:52,561:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:52,573:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:52,596:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:52,608:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:52,629:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:52,640:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:52,655:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:52,689:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:52,721:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:52,964:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:53,004:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:53,046:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:53,095:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:53,148:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:53,196:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:53,204:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:53,243:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:53,251:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:53,279:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:53,286:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:53,317:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:54,912:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-24 14:59:55,034:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2023-05-24 14:59:57,650:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:57,670:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:57,688:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:57,792:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:57,820:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:57,837:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 14:59:58,193:INFO:Calculating mean and std
2023-05-24 14:59:58,194:INFO:Creating metrics dataframe
2023-05-24 14:59:58,231:INFO:Uploading results into container
2023-05-24 14:59:58,231:INFO:Uploading model into container now
2023-05-24 14:59:58,231:INFO:_master_model_container: 8
2023-05-24 14:59:58,231:INFO:_display_container: 2
2023-05-24 14:59:58,231:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-05-24 14:59:58,231:INFO:create_model() successfully completed......................................
2023-05-24 14:59:58,315:INFO:SubProcess create_model() end ==================================
2023-05-24 14:59:58,315:INFO:Creating metrics dataframe
2023-05-24 14:59:58,316:INFO:Initializing Ada Boost Classifier
2023-05-24 14:59:58,316:INFO:Total runtime is 6.203337319691975 minutes
2023-05-24 14:59:58,316:INFO:SubProcess create_model() called ==================================
2023-05-24 14:59:58,316:INFO:Initializing create_model()
2023-05-24 14:59:58,316:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000225F6D05090>, model_only=True, return_train_score=False, kwargs={})
2023-05-24 14:59:58,316:INFO:Checking exceptions
2023-05-24 14:59:58,316:INFO:Importing libraries
2023-05-24 14:59:58,316:INFO:Copying training dataset
2023-05-24 14:59:58,502:INFO:Defining folds
2023-05-24 14:59:58,502:INFO:Declaring metric variables
2023-05-24 14:59:58,507:INFO:Importing untrained model
2023-05-24 14:59:58,512:INFO:Ada Boost Classifier Imported successfully
2023-05-24 14:59:58,518:INFO:Starting cross validation
2023-05-24 14:59:58,521:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-24 15:00:19,015:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:19,047:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:19,106:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:19,537:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:19,564:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:19,564:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:19,580:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:19,596:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:19,649:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:19,783:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:19,798:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:19,835:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:20,103:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:20,131:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:20,163:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:20,563:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:20,599:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:20,626:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:20,849:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:20,864:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:20,864:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:20,880:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:20,896:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:20,912:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:30,544:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:30,563:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:30,581:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:30,998:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:31,012:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:31,028:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:00:31,402:INFO:Calculating mean and std
2023-05-24 15:00:31,405:INFO:Creating metrics dataframe
2023-05-24 15:00:31,479:INFO:Uploading results into container
2023-05-24 15:00:31,480:INFO:Uploading model into container now
2023-05-24 15:00:31,480:INFO:_master_model_container: 9
2023-05-24 15:00:31,480:INFO:_display_container: 2
2023-05-24 15:00:31,480:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=123)
2023-05-24 15:00:31,480:INFO:create_model() successfully completed......................................
2023-05-24 15:00:31,563:INFO:SubProcess create_model() end ==================================
2023-05-24 15:00:31,563:INFO:Creating metrics dataframe
2023-05-24 15:00:31,580:INFO:Initializing Gradient Boosting Classifier
2023-05-24 15:00:31,580:INFO:Total runtime is 6.757747117678324 minutes
2023-05-24 15:00:31,586:INFO:SubProcess create_model() called ==================================
2023-05-24 15:00:31,587:INFO:Initializing create_model()
2023-05-24 15:00:31,587:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000225F6D05090>, model_only=True, return_train_score=False, kwargs={})
2023-05-24 15:00:31,588:INFO:Checking exceptions
2023-05-24 15:00:31,588:INFO:Importing libraries
2023-05-24 15:00:31,588:INFO:Copying training dataset
2023-05-24 15:00:31,787:INFO:Defining folds
2023-05-24 15:00:31,787:INFO:Declaring metric variables
2023-05-24 15:00:31,792:INFO:Importing untrained model
2023-05-24 15:00:31,796:INFO:Gradient Boosting Classifier Imported successfully
2023-05-24 15:00:31,806:INFO:Starting cross validation
2023-05-24 15:00:31,809:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-24 15:04:41,944:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.55s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 15:04:43,325:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.83s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 15:04:44,039:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:44,071:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:44,103:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:44,441:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.72s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 15:04:45,708:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.58s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 15:04:46,424:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:46,440:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:46,486:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:48,010:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.65s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 15:04:48,166:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.69s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 15:04:49,491:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.77s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 15:04:49,556:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.66s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 15:04:50,221:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:50,257:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:50,289:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:50,311:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:50,344:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:50,385:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:51,382:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.64s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 15:04:52,572:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.63s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 15:04:53,229:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:53,297:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:53,329:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:53,862:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.70s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 15:04:53,958:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.63s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 15:04:55,030:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.67s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 15:04:55,173:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.62s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 15:04:55,677:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:55,708:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:55,733:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:55,740:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:55,760:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:55,774:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:58,857:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:58,890:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:04:58,906:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:42,793:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:42,806:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:42,831:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:43,920:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:43,936:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:43,959:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:44,301:INFO:Calculating mean and std
2023-05-24 15:07:44,304:INFO:Creating metrics dataframe
2023-05-24 15:07:44,355:INFO:Uploading results into container
2023-05-24 15:07:44,355:INFO:Uploading model into container now
2023-05-24 15:07:44,355:INFO:_master_model_container: 10
2023-05-24 15:07:44,355:INFO:_display_container: 2
2023-05-24 15:07:44,355:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-05-24 15:07:44,355:INFO:create_model() successfully completed......................................
2023-05-24 15:07:44,440:INFO:SubProcess create_model() end ==================================
2023-05-24 15:07:44,440:INFO:Creating metrics dataframe
2023-05-24 15:07:44,456:INFO:Initializing Linear Discriminant Analysis
2023-05-24 15:07:44,456:INFO:Total runtime is 13.972337317466735 minutes
2023-05-24 15:07:44,456:INFO:SubProcess create_model() called ==================================
2023-05-24 15:07:44,456:INFO:Initializing create_model()
2023-05-24 15:07:44,456:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000225F6D05090>, model_only=True, return_train_score=False, kwargs={})
2023-05-24 15:07:44,456:INFO:Checking exceptions
2023-05-24 15:07:44,456:INFO:Importing libraries
2023-05-24 15:07:44,471:INFO:Copying training dataset
2023-05-24 15:07:44,658:INFO:Defining folds
2023-05-24 15:07:44,658:INFO:Declaring metric variables
2023-05-24 15:07:44,663:INFO:Importing untrained model
2023-05-24 15:07:44,663:INFO:Linear Discriminant Analysis Imported successfully
2023-05-24 15:07:44,676:INFO:Starting cross validation
2023-05-24 15:07:44,681:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-24 15:07:59,226:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,256:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,278:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,492:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,531:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,544:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,562:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,586:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,611:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,611:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,635:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,639:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,655:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,655:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,655:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,693:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,698:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,728:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,826:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,847:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,857:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,876:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,888:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:07:59,911:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:08:05,473:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:08:05,489:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:08:05,489:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:08:05,743:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:08:05,754:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:08:05,767:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:08:06,103:INFO:Calculating mean and std
2023-05-24 15:08:06,104:INFO:Creating metrics dataframe
2023-05-24 15:08:06,164:INFO:Uploading results into container
2023-05-24 15:08:06,165:INFO:Uploading model into container now
2023-05-24 15:08:06,165:INFO:_master_model_container: 11
2023-05-24 15:08:06,165:INFO:_display_container: 2
2023-05-24 15:08:06,165:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-05-24 15:08:06,165:INFO:create_model() successfully completed......................................
2023-05-24 15:08:06,224:INFO:SubProcess create_model() end ==================================
2023-05-24 15:08:06,224:INFO:Creating metrics dataframe
2023-05-24 15:08:06,240:INFO:Initializing Extra Trees Classifier
2023-05-24 15:08:06,240:INFO:Total runtime is 14.335402512550353 minutes
2023-05-24 15:08:06,240:INFO:SubProcess create_model() called ==================================
2023-05-24 15:08:06,240:INFO:Initializing create_model()
2023-05-24 15:08:06,240:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000225F6D05090>, model_only=True, return_train_score=False, kwargs={})
2023-05-24 15:08:06,240:INFO:Checking exceptions
2023-05-24 15:08:06,240:INFO:Importing libraries
2023-05-24 15:08:06,240:INFO:Copying training dataset
2023-05-24 15:08:06,424:INFO:Defining folds
2023-05-24 15:08:06,424:INFO:Declaring metric variables
2023-05-24 15:08:06,424:INFO:Importing untrained model
2023-05-24 15:08:06,424:INFO:Extra Trees Classifier Imported successfully
2023-05-24 15:08:06,439:INFO:Starting cross validation
2023-05-24 15:08:06,439:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-24 15:09:07,837:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.66s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 15:09:08,144:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 1.16s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 15:09:10,120:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:260: UserWarning: Persisting input arguments took 0.50s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  fitted_estimator = self._memory_fit(

2023-05-24 15:09:10,803:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.51s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 15:09:10,858:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.50s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 15:09:11,173:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.64s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 15:09:11,274:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:11,310:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:11,325:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.59s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 15:09:11,371:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:11,571:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:11,571:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:11,600:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:11,616:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:11,632:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:11,647:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:11,678:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.64s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 15:09:11,726:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.64s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 15:09:12,108:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:12,172:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:12,195:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:12,210:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:12,258:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:12,294:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.71s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 15:09:12,295:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:12,560:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:12,610:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:12,615:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:12,654:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:12,664:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:12,697:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:13,004:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:13,061:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:13,103:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:29,455:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:29,469:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:29,482:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:29,832:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:29,860:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:29,886:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:30,251:INFO:Calculating mean and std
2023-05-24 15:09:30,252:INFO:Creating metrics dataframe
2023-05-24 15:09:30,405:INFO:Uploading results into container
2023-05-24 15:09:30,406:INFO:Uploading model into container now
2023-05-24 15:09:30,407:INFO:_master_model_container: 12
2023-05-24 15:09:30,407:INFO:_display_container: 2
2023-05-24 15:09:30,409:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=123, verbose=0, warm_start=False)
2023-05-24 15:09:30,409:INFO:create_model() successfully completed......................................
2023-05-24 15:09:30,519:INFO:SubProcess create_model() end ==================================
2023-05-24 15:09:30,520:INFO:Creating metrics dataframe
2023-05-24 15:09:30,548:INFO:Initializing Light Gradient Boosting Machine
2023-05-24 15:09:30,548:INFO:Total runtime is 15.740539014339445 minutes
2023-05-24 15:09:30,554:INFO:SubProcess create_model() called ==================================
2023-05-24 15:09:30,554:INFO:Initializing create_model()
2023-05-24 15:09:30,554:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000225F6D05090>, model_only=True, return_train_score=False, kwargs={})
2023-05-24 15:09:30,555:INFO:Checking exceptions
2023-05-24 15:09:30,555:INFO:Importing libraries
2023-05-24 15:09:30,555:INFO:Copying training dataset
2023-05-24 15:09:30,854:INFO:Defining folds
2023-05-24 15:09:30,856:INFO:Declaring metric variables
2023-05-24 15:09:30,864:INFO:Importing untrained model
2023-05-24 15:09:30,871:INFO:Light Gradient Boosting Machine Imported successfully
2023-05-24 15:09:30,883:INFO:Starting cross validation
2023-05-24 15:09:30,886:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-24 15:09:50,462:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:50,477:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:50,512:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:50,888:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:50,934:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:50,971:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:51,268:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\pycaret\internal\pipeline.py:310: UserWarning: Persisting input arguments took 0.57s to run.
If this happens often in your code, it can cause performance problems 
(results will be correct in all cases). 
The reason for this is probably some large input arguments for a wrapped
 function (e.g. large strings).
THIS IS A JOBLIB ISSUE. If you can, kindly provide the joblib's team with an
 example so that they can fix the problem.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-05-24 15:09:51,362:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:51,404:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:51,447:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:51,458:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:51,488:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:51,520:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:51,520:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:51,534:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:51,580:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:51,824:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:51,857:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:51,891:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:52,017:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:52,045:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:52,058:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:52,069:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:52,084:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:09:52,112:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:03,143:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:03,159:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:03,159:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:03,174:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:03,174:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:03,190:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:03,425:INFO:Calculating mean and std
2023-05-24 15:10:03,425:INFO:Creating metrics dataframe
2023-05-24 15:10:03,567:INFO:Uploading results into container
2023-05-24 15:10:03,567:INFO:Uploading model into container now
2023-05-24 15:10:03,567:INFO:_master_model_container: 13
2023-05-24 15:10:03,567:INFO:_display_container: 2
2023-05-24 15:10:03,567:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-05-24 15:10:03,567:INFO:create_model() successfully completed......................................
2023-05-24 15:10:03,685:INFO:SubProcess create_model() end ==================================
2023-05-24 15:10:03,685:INFO:Creating metrics dataframe
2023-05-24 15:10:03,693:INFO:Initializing Dummy Classifier
2023-05-24 15:10:03,693:INFO:Total runtime is 16.292959686120348 minutes
2023-05-24 15:10:03,693:INFO:SubProcess create_model() called ==================================
2023-05-24 15:10:03,693:INFO:Initializing create_model()
2023-05-24 15:10:03,693:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000225F6D05090>, model_only=True, return_train_score=False, kwargs={})
2023-05-24 15:10:03,693:INFO:Checking exceptions
2023-05-24 15:10:03,693:INFO:Importing libraries
2023-05-24 15:10:03,709:INFO:Copying training dataset
2023-05-24 15:10:03,978:INFO:Defining folds
2023-05-24 15:10:03,978:INFO:Declaring metric variables
2023-05-24 15:10:03,978:INFO:Importing untrained model
2023-05-24 15:10:03,994:INFO:Dummy Classifier Imported successfully
2023-05-24 15:10:04,009:INFO:Starting cross validation
2023-05-24 15:10:04,025:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-05-24 15:10:05,333:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,338:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,353:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,353:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,369:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 15:10:05,369:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,369:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,369:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,384:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,384:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,384:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,384:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 15:10:05,400:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 15:10:05,400:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,400:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 15:10:05,400:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,400:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,416:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,416:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,416:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,433:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 15:10:05,433:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,448:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,448:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 15:10:05,448:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,448:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 15:10:05,463:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,463:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,480:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,495:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:05,512:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 15:10:05,527:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:06,349:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:06,365:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:06,380:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 15:10:06,380:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:06,507:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:06,522:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:06,539:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-05-24 15:10:06,539:WARNING:c:\Users\NT550-052\anaconda3\envs\tmp\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-05-24 15:10:06,791:INFO:Calculating mean and std
2023-05-24 15:10:06,791:INFO:Creating metrics dataframe
2023-05-24 15:10:06,870:INFO:Uploading results into container
2023-05-24 15:10:06,870:INFO:Uploading model into container now
2023-05-24 15:10:06,870:INFO:_master_model_container: 14
2023-05-24 15:10:06,870:INFO:_display_container: 2
2023-05-24 15:10:06,870:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2023-05-24 15:10:06,870:INFO:create_model() successfully completed......................................
2023-05-24 15:10:06,964:INFO:SubProcess create_model() end ==================================
2023-05-24 15:10:06,964:INFO:Creating metrics dataframe
2023-05-24 15:10:06,998:INFO:Initializing create_model()
2023-05-24 15:10:06,998:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000225F6CBBF10>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-05-24 15:10:06,998:INFO:Checking exceptions
2023-05-24 15:10:07,011:INFO:Importing libraries
2023-05-24 15:10:07,011:INFO:Copying training dataset
2023-05-24 15:10:07,249:INFO:Defining folds
2023-05-24 15:10:07,249:INFO:Declaring metric variables
2023-05-24 15:10:07,249:INFO:Importing untrained model
2023-05-24 15:10:07,249:INFO:Declaring custom model
2023-05-24 15:10:07,249:INFO:Light Gradient Boosting Machine Imported successfully
2023-05-24 15:10:07,249:INFO:Cross validation set to False
2023-05-24 15:10:07,249:INFO:Fitting Model
2023-05-24 15:10:13,667:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-05-24 15:10:13,667:INFO:create_model() successfully completed......................................
2023-05-24 15:10:13,825:INFO:_master_model_container: 14
2023-05-24 15:10:13,825:INFO:_display_container: 2
2023-05-24 15:10:13,825:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-05-24 15:10:13,825:INFO:compare_models() successfully completed......................................
